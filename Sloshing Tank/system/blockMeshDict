/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  10
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

radius      0.6;
radiusNeg  -0.6;
box         0.1;
boxNeg     -0.1;
zMax        0.7;
zMin       -0.7;

nR          40;
nZ          40;

verbose no;

geometry
{
    cylinder
    {
        type      searchableCylinder;
        point1    (0 0 -100);
        point2    (0 0  100);
        radius    $radius;
    }
}

scale 1;

vertices
(
    // Inner
    ($boxNeg $boxNeg $zMin) //0
    ($box    $boxNeg $zMin) //1
    ($boxNeg $box    $zMin) //2 
    ($box    $box    $zMin) //3

    // Outer block points
    project ($radiusNeg $radiusNeg $zMin) (cylinder) //4
    project ($radius    $radiusNeg $zMin) (cylinder) //5 
    project ($radiusNeg $radius    $zMin) (cylinder) //6
    project ($radius    $radius    $zMin) (cylinder) //7

    // Inner
    ($boxNeg $boxNeg $zMax) //8 
    ($box    $boxNeg $zMax) //9
    ($boxNeg $box    $zMax) //10 
    ($box    $box    $zMax) //11

    // Outer block points
    project ($radiusNeg $radiusNeg $zMax) (cylinder) //12
    project ($radius    $radiusNeg $zMax) (cylinder) //13 
    project ($radiusNeg $radius    $zMax) (cylinder) //14
    project ($radius    $radius    $zMax) (cylinder) //15
);

blocks
(
    hex ( 4  5  1  0 12 13  9  8) ($nR $nR $nZ) simpleGrading (1 1 1)
    hex ( 4  0  2  6 12  8 10 14) ($nR $nR $nZ) simpleGrading (1 1 1)
    hex ( 1  5  7  3  9 13 15 11) ($nR $nR $nZ) simpleGrading (1 1 1)
    hex ( 2  3  7  6 10 11 15 14) ($nR $nR $nZ) simpleGrading (1 1 1)
    hex ( 0  1  3  2  8  9 11 10) ($nR $nR $nZ) simpleGrading (1 1 1)
);

edges
(
    project  4  5 (cylinder)
    project  7  5 (cylinder)
    project  6  7 (cylinder)
    project  4  6 (cylinder)
    project 12 13 (cylinder)
    project 13 15 (cylinder)
    project 12 14 (cylinder)
    project 14 15 (cylinder)
);

defaultPatch
{
    type patch;
}

boundary
(
cylinderWall
    {
        type wall;
        faces
        (
            (4 5 13 12)   // Face between vertices 4, 5, 13, 12
            (5 7 15 13)   // Face between vertices 5, 7, 15, 13
            (7 6 14 15)   // Face between vertices 7, 6, 14, 15
            (6 4 12 14)   // Face between vertices 6, 4, 12, 14
        );
    }

);

mergePatchPairs
(
);

// ************************************************************************* //
